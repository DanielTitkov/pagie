version: '3.5'

services:

    backend:
        build: ./backend
        ports:
            - '5000:5000'
        expose:
            - '5000'
        depends_on:
            - mongo
        volumes:
            - ./backend:/home/pagie
        networks:
            - app_net
        env_file:
            - .env
        command: gunicorn -w 4 -b :5000 --access-logfile - --error-logfile - pagie:app

    frontend:
        build:
            context: ./frontend-material
            args:
                API_URL: ${API_URL}
                API_PROXY_PATH: ${API_PROXY_PATH}
                SERVER_NAME: ${SERVER_NAME}
        restart: unless-stopped
        ports:
            - '80:80'
            - '443:443'
        volumes:
            - ./data/certbot/conf:/etc/letsencrypt
            - ./data/certbot/www:/var/www/certbot
            - ./logs/nginx:/var/log/nginx/
        depends_on:
            - backend
        env_file:
            - .env
        networks:
            - app_net
        command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

    mongo:
        build:
            context: ./mongo
            args:
                MONGO_DATA_DIR: /data/db
                MONGO_LOG_DIR: /logs
                MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
                MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
                DB_NAME: ${DB_NAME}
                DB_USER: ${DB_USER}
                DB_PASSWORD: ${DB_PASSWORD}
        container_name: "mongo"
        volumes:
            # - ./data/db:/data/db
            - ./logs/mongo:/logs
        ports:
            - '27072:27017'
        expose:
            - '27017'
        networks:
            - app_net
        env_file:
            - .env
        command: mongod --smallfiles --logpath /dev/null

    certbot:
       image: certbot/certbot
       restart: unless-stopped
       volumes:
           - ./data/certbot/conf:/etc/letsencrypt
           - ./data/certbot/www:/var/www/certbot
       entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

networks:
  app_net:
    driver: "bridge"
